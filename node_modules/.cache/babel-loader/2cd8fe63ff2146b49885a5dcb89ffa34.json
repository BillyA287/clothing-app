{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure } from './user.actions';\nexport function* getSnapShotFromUserAuth(userAuth) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapShotFromUserAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* signInWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapShotFromUserAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signInWithEmail);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)]);\n}","map":{"version":3,"sources":["/Users/billy_atim/Desktop/untitled folder/clothing-app/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","getSnapShotFromUserAuth","userAuth","userRef","userSnapshot","get","id","data","error","isUserAuthenticated","signInWithGoogle","user","signInWithPopup","signInWithEmail","payload","email","password","signInWithEmailAndPassword","onCheckUserSession","CHECK_USER_SESSION","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,GAAzB,EAA6BC,IAA7B,QAAyC,oBAAzC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,EAAyDC,cAAzD,QAA8E,+BAA9E;AACA,SAASC,aAAT,EAAuBC,aAAvB,QAA2C,gBAA3C;AAKA,OAAO,UAAUC,uBAAV,CAAkCC,QAAlC,EAA2C;AAClD,MAAI;AACJ,UAAMC,OAAO,GAAG,MAAMV,IAAI,CAACI,yBAAD,EAA2BK,QAA3B,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMd,GAAG,CAACQ,aAAa,CAAC;AAACO,MAAAA,EAAE,EAAEF,YAAY,CAACE,EAAlB;AAAsB,SAAGF,YAAY,CAACG,IAAb;AAAzB,KAAD,CAAd,CAAT;AACC,GAJD,CAIC,OAAOC,KAAP,EAAa;AACb,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACC;AACD;AAED,OAAO,UAAUC,mBAAV,GAAgC;AACnC,MAAI;AACR,UAAMP,QAAQ,GAAG,MAAMJ,cAAc,EAArC;AACA,QAAG,CAACI,QAAJ,EAAc;AACd,UAAMD,uBAAuB,CAACC,QAAD,CAA7B;AAEK,GALD,CAKC,OAAOM,KAAP,EAAa;AAClB,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACC;AACA;AAED,OAAO,UAAUE,gBAAV,GAA4B;AACnC,MAAI;AACJ,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACiB,eAAL,CAAqBhB,cAArB,CAArB;AACA,UAAMK,uBAAuB,CAACU,IAAD,CAA7B;AACC,GAHD,CAGC,OAAOH,KAAP,EAAa;AACb,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACC;AACD;AAED,OAAO,UAAUK,eAAV,CAA0B;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAuD;AAC9D,MAAI;AACJ,UAAM;AAACL,MAAAA;AAAD,QAAS,MAAMhB,IAAI,CAACsB,0BAAL,CAAgCF,KAAhC,EAAsCC,QAAtC,CAArB;AACA,UAAMf,uBAAuB,CAACU,IAAD,CAA7B;AAEC,GAJD,CAIC,OAAOH,KAAP,EAAc;AACf,UAAMjB,GAAG,CAACS,aAAa,CAACQ,KAAD,CAAd,CAAT;AACC;AACA;AAED,OAAO,UAAUU,kBAAV,GAA+B;AAClC,QAAM5B,UAAU,CAACI,eAAe,CAACyB,kBAAjB,EAAqCV,mBAArC,CAAhB;AACH;AAED,OAAO,UAAUW,mBAAV,GAA+B;AAClC,QAAM9B,UAAU,CAACI,eAAe,CAAC2B,oBAAjB,EAAuCX,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUY,kBAAV,GAA8B;AACjC,QAAMhC,UAAU,CAACI,eAAe,CAAC6B,mBAAjB,EAAqCV,eAArC,CAAhB;AACH;AAED,OAAO,UAAUW,SAAV,GAAqB;AACxB,QAAMhC,GAAG,CAAC,CAACC,IAAI,CAAC2B,mBAAD,CAAL,EAA4B3B,IAAI,CAAC6B,kBAAD,CAAhC,EAAsD7B,IAAI,CAACyB,kBAAD,CAA1D,CAAD,CAAT;AACH","sourcesContent":["import {takeLatest, put, all,call } from 'redux-saga/effects';\n\nimport UserActionTypes from './user.types'\n\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils'\nimport { signInSuccess,signInFailure} from './user.actions';\n\n\n\n\nexport function* getSnapShotFromUserAuth(userAuth){\ntry {\nconst userRef = yield call(createUserProfileDocument,userAuth)\nconst userSnapshot = yield userRef.get()\nyield put(signInSuccess({id: userSnapshot.id, ...userSnapshot.data()}))\n}catch (error){\n yield put(signInFailure(error))\n }\n}\n\nexport function* isUserAuthenticated (){\n    try {\nconst userAuth = yield getCurrentUser();\nif(!userAuth) return;\nyield getSnapShotFromUserAuth(userAuth);\n\n    }catch (error){\nyield put(signInFailure(error))\n}\n}\n\nexport function* signInWithGoogle(){\ntry {\nconst {user} = yield auth.signInWithPopup(googleProvider)\nyield getSnapShotFromUserAuth(user)\n}catch (error){\n yield put(signInFailure(error))\n }\n}\n\nexport function* signInWithEmail({payload: {email, password}}){\ntry {\nconst {user} = yield auth.signInWithEmailAndPassword(email,password);\nyield getSnapShotFromUserAuth(user)\n\n}catch (error) {\nyield put(signInFailure(error))\n}\n}\n\nexport function* onCheckUserSession (){\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\n}\n\nexport function* onGoogleSignInStart(){\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\n}\n\nexport function* onEmailSignInStart(){\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START,signInWithEmail )\n}\n\nexport function* userSagas(){\n    yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(onCheckUserSession)])\n}"]},"metadata":{},"sourceType":"module"}